// src/middleware.ts

import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { Routes } from '@/config/routes';

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // ‚úÖ API —Ö“Ø—Å—ç–ª—Ç, static —Ñ–∞–π–ª—É—É–¥—ã–≥ –∞–ª–≥–∞—Å–Ω–∞
  if (
    pathname.startsWith('/api') ||
    pathname.startsWith('/_next') ||
    pathname.startsWith('/static') ||
    pathname.includes('/favicon.ico')
  ) {
    return NextResponse.next();
  }

  // ‚úÖ Cookie-—Å Session token —É–Ω—à–∏–Ω–∞
  const token =
    request.cookies.get('next-auth.session-token')?.value ||
    request.cookies.get('__Secure-next-auth.session-token')?.value;

  // ‚úÖ Public –∑”©–≤—à”©”©—Ä”©—Ö –∑”©–≤—Ö”©–Ω '/auth'
  const publicPaths = [Routes.Auth.Index.route]; // '/auth'
  const isPublicPage = publicPaths.some((path) => pathname.startsWith(path));

  if (!token && !isPublicPage) {
    // üõë –•—ç—Ä–≤—ç—ç –Ω—ç–≤—Ç—Ä—ç—ç–≥“Ø–π –±–æ–ª -> /auth —Ä—É—É —è–≤—É—É–ª–Ω–∞
    const url = request.nextUrl.clone();
    url.pathname = Routes.Auth.Index.route;
    return NextResponse.redirect(url);
  }

  if (token && isPublicPage) {
    // üõë –•—ç—Ä–≤—ç—ç –∞–ª—å —Ö—ç–¥–∏–π–Ω login —Ö–∏–π—Å—ç–Ω —Ö“Ø–Ω /auth —Ä—É—É –æ—Ä–æ—Ö –≥—ç–∂ –±–∞–π–≤–∞–ª -> / (home) —Ä—É—É –±—É—Ü–∞–∞–Ω–∞
    const url = request.nextUrl.clone();
    url.pathname = Routes.Home.Index.route;
    return NextResponse.redirect(url);
  }

  // ‚úÖ Otherwise –∑”©–≤—à”©”©—Ä
  return NextResponse.next();
}

// ‚úÖ Matcher –∑”©–≤ —Ç–æ—Ö–∏—Ä—É—É–ª–Ω–∞
export const config = {
  matcher: ['/((?!api|_next|static|favicon.ico).*)'],
};
